// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/service/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pager "github.com/sanches1984/gopkg-pg-orm/pager"
	model "github.com/sanches1984/msa-auth/internal/app/model"
	storage "github.com/sanches1984/msa-auth/internal/pkg/storage"
	uuid "github.com/satori/go.uuid"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateRefreshToken mocks base method.
func (m *MockRepository) CreateRefreshToken(ctx context.Context, token *model.RefreshToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRefreshToken", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRefreshToken indicates an expected call of CreateRefreshToken.
func (mr *MockRepositoryMockRecorder) CreateRefreshToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRefreshToken", reflect.TypeOf((*MockRepository)(nil).CreateRefreshToken), ctx, token)
}

// CreateUser mocks base method.
func (m *MockRepository) CreateUser(ctx context.Context, user *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepository)(nil).CreateUser), ctx, user)
}

// DeleteRefreshToken mocks base method.
func (m *MockRepository) DeleteRefreshToken(ctx context.Context, filter model.RefreshTokenFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRefreshToken", ctx, filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRefreshToken indicates an expected call of DeleteRefreshToken.
func (mr *MockRepositoryMockRecorder) DeleteRefreshToken(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRefreshToken", reflect.TypeOf((*MockRepository)(nil).DeleteRefreshToken), ctx, filter)
}

// DeleteUser mocks base method.
func (m *MockRepository) DeleteUser(ctx context.Context, user *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockRepositoryMockRecorder) DeleteUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockRepository)(nil).DeleteUser), ctx, user)
}

// GetRefreshToken mocks base method.
func (m *MockRepository) GetRefreshToken(ctx context.Context, filter model.RefreshTokenFilter) (*model.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshToken", ctx, filter)
	ret0, _ := ret[0].(*model.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefreshToken indicates an expected call of GetRefreshToken.
func (mr *MockRepositoryMockRecorder) GetRefreshToken(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshToken", reflect.TypeOf((*MockRepository)(nil).GetRefreshToken), ctx, filter)
}

// GetRefreshTokens mocks base method.
func (m *MockRepository) GetRefreshTokens(ctx context.Context, filter model.RefreshTokenFilter) (model.RefreshTokenList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshTokens", ctx, filter)
	ret0, _ := ret[0].(model.RefreshTokenList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefreshTokens indicates an expected call of GetRefreshTokens.
func (mr *MockRepositoryMockRecorder) GetRefreshTokens(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshTokens", reflect.TypeOf((*MockRepository)(nil).GetRefreshTokens), ctx, filter)
}

// GetUser mocks base method.
func (m *MockRepository) GetUser(ctx context.Context, filter model.UserFilter) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, filter)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockRepositoryMockRecorder) GetUser(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockRepository)(nil).GetUser), ctx, filter)
}

// GetUsers mocks base method.
func (m *MockRepository) GetUsers(ctx context.Context, filter model.UserFilter, pgr pager.Pager) (model.UserList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx, filter, pgr)
	ret0, _ := ret[0].(model.UserList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockRepositoryMockRecorder) GetUsers(ctx, filter, pgr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockRepository)(nil).GetUsers), ctx, filter, pgr)
}

// UpdateRefreshToken mocks base method.
func (m *MockRepository) UpdateRefreshToken(ctx context.Context, token *model.RefreshToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRefreshToken", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRefreshToken indicates an expected call of UpdateRefreshToken.
func (mr *MockRepositoryMockRecorder) UpdateRefreshToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRefreshToken", reflect.TypeOf((*MockRepository)(nil).UpdateRefreshToken), ctx, token)
}

// UpdateUserPassword mocks base method.
func (m *MockRepository) UpdateUserPassword(ctx context.Context, user *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword.
func (mr *MockRepositoryMockRecorder) UpdateUserPassword(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockRepository)(nil).UpdateUserPassword), ctx, user)
}

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockStorage) CreateSession(userID int64, userData []byte) (*storage.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", userID, userData)
	ret0, _ := ret[0].(*storage.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockStorageMockRecorder) CreateSession(userID, userData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockStorage)(nil).CreateSession), userID, userData)
}

// DecodeToken mocks base method.
func (m *MockStorage) DecodeToken(token string) (int64, uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeToken", token)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(uuid.UUID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DecodeToken indicates an expected call of DecodeToken.
func (mr *MockStorageMockRecorder) DecodeToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeToken", reflect.TypeOf((*MockStorage)(nil).DecodeToken), token)
}

// DeleteSession mocks base method.
func (m *MockStorage) DeleteSession(token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", token)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockStorageMockRecorder) DeleteSession(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockStorage)(nil).DeleteSession), token)
}

// DeleteSessionByUUID mocks base method.
func (m *MockStorage) DeleteSessionByUUID(sessionID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSessionByUUID", sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSessionByUUID indicates an expected call of DeleteSessionByUUID.
func (mr *MockStorageMockRecorder) DeleteSessionByUUID(sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSessionByUUID", reflect.TypeOf((*MockStorage)(nil).DeleteSessionByUUID), sessionID)
}

// GetSessionData mocks base method.
func (m *MockStorage) GetSessionData(token string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionData", token)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionData indicates an expected call of GetSessionData.
func (mr *MockStorageMockRecorder) GetSessionData(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionData", reflect.TypeOf((*MockStorage)(nil).GetSessionData), token)
}

// GetSessionDataByUUID mocks base method.
func (m *MockStorage) GetSessionDataByUUID(sessionID uuid.UUID) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionDataByUUID", sessionID)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionDataByUUID indicates an expected call of GetSessionDataByUUID.
func (mr *MockStorageMockRecorder) GetSessionDataByUUID(sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionDataByUUID", reflect.TypeOf((*MockStorage)(nil).GetSessionDataByUUID), sessionID)
}

// RefreshSession mocks base method.
func (m *MockStorage) RefreshSession(userID int64, sessionID uuid.UUID, userData []byte) (*storage.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshSession", userID, sessionID, userData)
	ret0, _ := ret[0].(*storage.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshSession indicates an expected call of RefreshSession.
func (mr *MockStorageMockRecorder) RefreshSession(userID, sessionID, userData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshSession", reflect.TypeOf((*MockStorage)(nil).RefreshSession), userID, sessionID, userData)
}

// UpdateSessionData mocks base method.
func (m *MockStorage) UpdateSessionData(token string, userData []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSessionData", token, userData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSessionData indicates an expected call of UpdateSessionData.
func (mr *MockStorageMockRecorder) UpdateSessionData(token, userData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSessionData", reflect.TypeOf((*MockStorage)(nil).UpdateSessionData), token, userData)
}
